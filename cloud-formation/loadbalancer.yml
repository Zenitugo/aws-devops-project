AWSTemplateFormatVersion: "2010-09-09"
Description: This template creates a Load balancer
Parameters:
  ExportVPC:
    Type: String
    Description: The VPC ID for the application

Resources:
  # Create Application Load balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Qr-app-load-balancer
      Scheme: internet-facing
      SecurityGroups: 
        - Fn::ImportValue: !Sub ${ExportVPC}-alb-sg
      SubnetMappings: 
        - SubnetMapping
      Subnets: 
        - Fn::ImportValue: !Sub ${ExportVPC}-pubsub1
        - Fn::ImportValue: !Sub ${ExportVPC}-pubsub2


# Create a listener on port 80
HTTPlistener:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: "redirect"
         RedirectConfig:
           Protocol: "HTTPS"
           Port: 443
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"
     LoadBalancerArn: !Ref ApplicationLoadBalancer
     Port: 80
     Protocol: "HTTP"


# Create a target group
TargetGroup:
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
    HealthCheckIntervalSeconds: 10
    HealthCheckPath: /
    HealthCheckTimeoutSeconds: 5
    HealthyThresholdCount: 2
    IpAddressType: String
    Matcher: 
      HttpCode: 200,302
    Name: microservice app
    Port: 80
    Protocol: HTTP
    UnhealthyThresholdCount: 5
    VpcId: 
      Fn::ImportValue: !Sub ${ExportVPC}-VPCID

Outputs:
  ALBDNS:
    Description: Loadbalancer DNS
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-alb-dns
  
  ALBZONE:
    Description: Loadbalancer zone ID
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub ${AWS::StackName}-alb-zone-id

  TargetGroup:
    Description: Target group ARN
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-tg-arn
